require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")

ENV['RCT_NEW_ARCH_ENABLED'] = '0'

# Use the actual Node runtime, not Yarn's temp shim
ENV['NODE_BINARY'] = `node -p "process.execPath"`.strip

# Resolve react_native_pods.rb with node to allow for hoisting
def node_require(script)
  # Resolve script with node to allow for hoisting
  require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(
      '#{script}',
        {paths: [process.argv[1]]},
    )", __dir__]).strip
end

   # Use it to require both react-native's and this package's scripts:
 node_require('react-native/scripts/react_native_pods.rb')
 node_require('react-native-permissions/scripts/setup.rb')

platform :ios, min_ios_version_supported
prepare_react_native_project!

# part of default RN project template, overridden by use_framework requirement of firbase modules
# linkage = ENV['USE_FRAMEWORKS']
# if linkage != nil
#   Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
#   use_frameworks! :linkage => linkage.to_sym
# end

# use_framework static is required by firebase modules, it's better to diable use_framework to
# utilise full potential of new Architecture.
use_frameworks! :linkage => :static
$RNFirebaseAsStaticFramework = true

target 'Ecency' do

  use_expo_modules!


  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end


  #config = use_native_modules! # part of default RN project, overriden by expo integration
  config = use_native_modules!(config_command)  



  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end


  setup_permissions([
    'Camera',
  ])


  # Pods for Ecency
  pod 'GoogleUtilities'

  use_react_native!(
    :path => config[:reactNativePath],

    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'EcencyTests' do
    inherit! :complete
    # Pods for testing
  end


  # Convert all permission pods into static libraries
  pre_install do |installer|
    Pod::Installer::Xcode::TargetValidator.send(:define_method, :verify_no_static_framework_transitive_dependencies) {}

    installer.pod_targets.each do |pod|
      if pod.name.eql?('RNPermissions') || pod.name.start_with?('Permission-')
        def pod.build_type;
          # Uncomment the line corresponding to your CocoaPods version
          Pod::BuildType.static_library # >= 1.9
          # Pod::Target::BuildType.static_library # < 1.9
        end
      end
    end
  end


  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )


    installer.pods_project.targets.each do |target|

      # Consider dropping these global overrides unless you truly need them:
      target.build_configurations.each do |cfg|
        # requirement to run dev builds on m series devices
        cfg.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'
      end

      # TcpSockets duplicate symbols workaround (only if still needed)
      if target.name == 'TcpSockets'
        target.source_build_phase.files.each do |f|
          if f.display_name =~ /GCDAsyncSocket\.m$/
            puts "Removing #{f.display_name} from #{target.name}"
            target.source_build_phase.files.delete(f)
            break
          end
        end
      end

    end
  end

end


target 'ImageNotifi' do
  pod 'GoogleUtilities'
  pod 'Firebase/Messaging'
end
